
https://practice.geeksforgeeks.org/problems/ceil-the-floor2802/1



/*

heap sort takes O(nlogn) times 
approach 01 :-
O(n)
naive approach
we can sort the array 
and then 
if will check if element is present in vector or not if yes then we got as required 
else
we will take two pointer and compare arr[i] <  k and arr[i+1] > k if yes then that is required value 



approach 02 : -
O(nlogn)

sort the array 
check if key  = vt[0]
 then return -1 and vt[0]
if key = vt[len-1]
return vt[len-1 and -1 

and then we will traverse using binary search 
if element found then got as required
else

floor = vt[right]
ceil = vt[left]







*/

pair<int, int> getFloorAndCeil(int arr[], int n, int x) {
    pair<int,int> pr;
    sort(arr,arr+n);
    int i=0,j=n-1;
    int mid;
    
    if(arr[0]>x){
        pr.first=-1;
        pr.second=arr[0];
        return pr;
    }else if(arr[n-1]<x){
        pr.first=arr[n-1];
        pr.second=-1;
        return pr;
    }
    
    
    
    while(i<=j){
       mid=(i+j)/2;
        if(arr[mid]==x){
          
           
           pr.first=arr[mid];
           pr.second=arr[mid];
           
           return pr;
           
        }else if(arr[mid]>x){
            j=mid-1;
            
        }else {
            i=mid+1;
            
        }
    }
    
    
    pr.first=arr[j];
    pr.second=arr[i];
      return pr;
}
