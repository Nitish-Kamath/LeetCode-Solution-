Link:-
https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

Topic:-
backtracking(recursion with all possible solution

DataStructure req:-
matrix(for visited matrix)
string ( for storing direction)
2D Vector of string (for storing all possible path)
vector of pair of int (for storing all the possible direction)

we have to start from 0,0 and reach to n-1, n-1 

//  FOR LEXICOGRAPHICALLY ORDER
we have to move in DLRU fashion 

Following condn must be satisfied for movement to next cell :-

01. index must not go out of range
02. next cell value must be 1
03. next cell must not be visited

// if above condn satisfied then before moving to next cell 
mark current cell as visietd 

means if rat is in current cell then is not marked visited as it leaves current cell then it is marked visited.

for current cell  since all four direction possible 
we will check for direction [ D -> L -> R -> U ]
if direction satisfied then move in that direction 

what abt remanining direction??
when we backtrack to given cell again , then we will cover the next remaining direction.

when will backtrack occurs??
when all possible direction is covered(may be get obstruction)  or reached to goal state then backtracking occurs.
while backtracking happens then before moving to next cell mark them as unvisited.

imp point:- 
initially visited matrix is all zero  and finally also visited matrix is all zero.

off Beat:-

if 0,0 is at bottom_left then direction as D,L,R,U is :-
vector<pair<int,int>> dir({0,-1},{-1,0},{1,0},{0,1});
if 0,0 is at top_left then direction as D,L,R,U is :-
vector<pair<int,int>> dir({1,0},{0,-1},{0,1},{-1,0});

for(auto it : dir)
{
int x_dir = it.first;
int y_dir = it.second;

}

code:-

#include <bits/stdc++.h>

using namespace std;

class Solution {
  void findPathHelper(int i, int j, vector < vector < int >> & a, int n, vector < string > & ans, string move,
    vector < vector < int >> & vis) {
    if (i == n - 1 && j == n - 1) {
      ans.push_back(move);
      return;
    }

    // downward
    if (i + 1 < n && !vis[i + 1][j] && a[i + 1][j] == 1) {
      vis[i][j] = 1;
      findPathHelper(i + 1, j, a, n, ans, move + 'D', vis);
      vis[i][j] = 0;
    }

    // left
    if (j - 1 >= 0 && !vis[i][j - 1] && a[i][j - 1] == 1) {
      vis[i][j] = 1;
      findPathHelper(i, j - 1, a, n, ans, move + 'L', vis);
      vis[i][j] = 0;
    }

    // right 
    if (j + 1 < n && !vis[i][j + 1] && a[i][j + 1] == 1) {
      vis[i][j] = 1;
      findPathHelper(i, j + 1, a, n, ans, move + 'R', vis);
      vis[i][j] = 0;
    }

    // upward
    if (i - 1 >= 0 && !vis[i - 1][j] && a[i - 1][j] == 1) {
      vis[i][j] = 1;
      findPathHelper(i - 1, j, a, n, ans, move + 'U', vis);
      vis[i][j] = 0;
    }

  }
  public:
    vector < string > findPath(vector < vector < int >> & m, int n) {
      vector < string > ans;
      vector < vector < int >> vis(n, vector < int > (n, 0));

      if (m[0][0] == 1) findPathHelper(0, 0, m, n, ans, "", vis);
      return ans;
    }
};

int main() {
  int n = 4;

   vector < vector < int >> m = {{1,0,0,0},{1,1,0,1},{1,1,0,0},{0,1,1,1}};

  Solution obj;
  vector < string > result = obj.findPath(m, n);
  if (result.size() == 0)
    cout << -1;
  else
    for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
  cout << endl;

  return 0;
}

