https://leetcode.com/problems/3sum

/*
approach 01:-
O(n^2)
what we can do 
we will fix one element and and do the same thing as we have done in two sum 
what two sum ??
two sum 
we will check if elemetn is found in map 
if yes then we get the result 
else
we have to put target - val;





approach 02:- 
{THIS IS GENERAL APPROACH AND CAN BE USED WITH ANY SUM, LIKE P SUM FOR THAT CASE TC WOULD BE N ^ (P-1)}
for three sum tc would be O(n^2)
// algo
sort
and then fix one element take two pointer left, right
if ( fixed ele + num[left] + num[right] ) > target
right --;
else if                                    < target
left++;
else                                       = target
st.insert(st.end(), {fixed ele, num[left] , num[right]})


yahi to karna hai 
and since we have to return 2d vector
what we can do we can vector<vector<int>> master(st.begin(),st.end());

return master
*/








class Solution {
public:
    set<vector<int>> st;
    vector<vector<int>> threeSum(vector<int>& nums) {
    sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 2; i++)
        {
            int left = i + 1;
            int right = nums.size() - 1;
            while (left < right)
            {
                if (nums[left] + nums[right] + nums[i] > 0)
                    right--;
                else if (nums[left] + nums[right] + nums[i] < 0)
                    left++;

                else
                {
                    st.insert(st.end(), {nums[i], nums[left], nums[right]});
                    right--;
                    left++;
                }
            }
        }

        vector<vector<int>> master(st.begin(), st.end());

        return master;
        
    }
};
