https://leetcode.com/problems/median-of-two-sorted-arrays/

approach01 :

we can merge them in one vector and then sort them and find median.
Time Complexity would be O(nlogn)
// formula for finding median 
if len is odd then median is  vt[n/2]
if len is even then median is (vt[n/2] + vt[n/2 +1])/2

we can futher optimise it we can do like, we can use two pointer. Let i and j.
i point to first vector and j point to second vector. we have to find min of two 
and push into new vector.If we element is taken from first vector then i++ .
if element is taken from second vector then j++.
if element is same then push from any of the vector then do i++ and j++ simultanoulsy.

What if any one of vector become empty then push other vector in final vector.
space complexity would be O(n+m) and time complexity would be O(n + m).

approach 02 :


Do this same operation in O(log(n+m)).
what we can do we will use take two bucket.
In Both bucket element will be taken from vect1 and vect2.

first of all find total length of two vector.
let length be 10.
In bucket one there would be 5 element and in bucket two there would be 5 element.

using binary search in any of the vector(let vt1). 
find mid index put element from start_index 
to mid_index-1 from vt1 and remaining ( 5 - mid_index) element from vt2 in bucket1

for remaining element from vt1 and vt2, put it into bucket2.

How will be separation :
seperation would be like (n1 + n2 + 1) /2
if n1 = 4 and n2 = 6 element in bucket would be 5 and 5
if n1 = 5 and n2 = 6 element in bucket would be 6 and 5 

while applying bSearch in bucket1 , if mid_index = 0  then push INT_MIN

while applying bSearch in bucket2 , if mid_index = len-1  then push INT_MAX
you can apply binary Search on any of the vector.
If chosen 1 then go with it for entire coding.


Check if l1 <= r2  and l2 <= r1

if No :- 

if l1 is greater than r2  do binary search again(end = mid -1).
if l2 is greater than  r1 then end = mid + 1;

if yes: -
l1 = vt1[pt1-1];
l2 = vt2[pt2 -1];
r1 = vt1[pt1];
r2 = vt2[pt2]


if length is odd then median = max(l1,l2)
if length is even then median = (max(l1,l2) + min(r1, r2))/2.0



if condition is satisfied, then we have to find max(l1, l2) from bucket1 and min(r1,r1) from bucket2.
the element that we get(let val1 and val2) is required then we would do like (val1 + val2)/2;

//Coding Part

#include<bits/stdc++.h>
using namespace std;

float median(int num 1[],int num2[],int m,int n) {
    if(m>n)
        return median(nums2,nums1,n,m);//ensuring that binary search happens on minimum size array
        
    int low=0,high=m,medianPos=((m+n)+1)/2;
    while(low<=high) {
        int cut1 = (low+high)>>1;
        int cut2 = medianPos - cut1;
        
        int l1 = (cut1 == 0)? INT_MIN:nums1[cut1-1];
        int l2 = (cut2 == 0)? INT_MIN:nums2[cut2-1];
        int r1 = (cut1 == m)? INT_MAX:nums1[cut1];
        int r2 = (cut2 == n)? INT_MAX:nums2[cut2];
        
        if(l1<=r2 && l2<=r1) {
            if((m+n)%2 != 0)
                return max(l1,l2);
            else 
                return (max(l1,l2)+min(r1,r2))/2.0;
        }
        else if(l1>r2) high = cut1-1;
        else low = cut1+1;
    }
    return 0.0;
}

int main() {
    int nums1[] = {1,4,7,10,12};
    int nums2[] = {2,3,6,15};
    int m = sizeof(nums1)/sizeof(nums1[0]);
    int n = sizeof(nums2)/sizeof(nums2[0]);
    cout<<"The Median of two sorted arrays is"<<fixed<<setprecision(5)
    <<median(nums1,nums2,m,n);
    return 0;
}



